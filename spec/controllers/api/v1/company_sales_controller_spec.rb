require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe API::V1::CompanySalesController, type: :controller do
  # This should return the minimal set of attributes required to create a valid
  # CompanySale. As you add validations to CompanySale, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) do
    skip('Add a hash of attributes valid for your model')
  end

  let(:invalid_attributes) do
    skip('Add a hash of attributes invalid for your model')
  end

  # This should return the minimal set of values that should be in the headers
  # in order to pass any filters (e.g. authentication) defined in
  # CompanySalesController, or in your router and rack
  # middleware. Be sure to keep this updated too.
  let(:valid_headers) do
    {}
  end

  describe 'GET #index' do
    it 'renders a successful response' do
      company_sale_attributes = create(:company_sale).attributes
      get :index, params: company_sale_attributes, as: :json

      expect(response).to be_successful
    end
  end

  describe 'GET #show' do
    it 'renders a successful response' do
      company_sale = create(:company_sale)
      get :show, params: { id: company_sale.id }, as: :json

      expect(response).to be_successful
      expect(response.body).to eql company_sale.attributes.to_json
    end
  end

  describe 'POST #create' do
    let(:params) do
      { imported_at: '2021-08-13T01:48:00.000Z', total_gross_income: 30.0 }
    end

    context 'with valid parameters' do
      it 'creates a new CompanySale' do
        expect do
          post :create, params: params, as: :json
        end.to change(CompanySale, :count).by(1)
      end

      fit 'renders a JSON response with the new company_sale' do
        post :create, params: { company_sale: params }, as: :json

        expect(response).to have_http_status(:created)
        expect(response.content_type).to match(a_string_including('application/json'))
        expect(response.body).to include(params.to_json)
      end
    end

    xcontext 'with invalid parameters' do
      it 'does not create a new CompanySale' do
        expect do
          post company_sales_url,
               params: { company_sale: invalid_attributes }, as: :json
        end.to change(CompanySale, :count).by(0)
      end

      it 'renders a JSON response with errors for the new company_sale' do
        post company_sales_url,
             params: { company_sale: invalid_attributes }, headers: valid_headers, as: :json
        expect(response).to have_http_status(:unprocessable_entity)
        expect(response.content_type).to eq('application/json')
      end
    end
  end

  xdescribe 'PATCH /update' do
    context 'with valid parameters' do
      let(:new_attributes) do
        skip('Add a hash of attributes valid for your model')
      end

      it 'updates the requested company_sale' do
        company_sale = CompanySale.create! valid_attributes
        patch company_sale_url(company_sale),
              params: { company_sale: new_attributes }, headers: valid_headers, as: :json
        company_sale.reload
        skip('Add assertions for updated state')
      end

      it 'renders a JSON response with the company_sale' do
        company_sale = CompanySale.create! valid_attributes
        patch company_sale_url(company_sale),
              params: { company_sale: new_attributes }, headers: valid_headers, as: :json
        expect(response).to have_http_status(:ok)
        expect(response.content_type).to match(a_string_including('application/json'))
      end
    end

    context 'with invalid parameters' do
      it 'renders a JSON response with errors for the company_sale' do
        company_sale = CompanySale.create! valid_attributes
        patch company_sale_url(company_sale),
              params: { company_sale: invalid_attributes }, headers: valid_headers, as: :json
        expect(response).to have_http_status(:unprocessable_entity)
        expect(response.content_type).to eq('application/json')
      end
    end
  end

  xdescribe 'DELETE /destroy' do
    it 'destroys the requested company_sale' do
      company_sale = CompanySale.create! valid_attributes
      expect do
        delete company_sale_url(company_sale), headers: valid_headers, as: :json
      end.to change(CompanySale, :count).by(-1)
    end
  end
end
